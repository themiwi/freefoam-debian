#!@PYTHON_EXECUTABLE@
#-------------------------------------------------------------------------------
#               ______                _     ____          __  __
#              |  ____|             _| |_  / __ \   /\   |  \/  |
#              | |__ _ __ ___  ___ /     \| |  | | /  \  | \  / |
#              |  __| '__/ _ \/ _ ( (| |) ) |  | |/ /\ \ | |\/| |
#              | |  | | |  __/  __/\_   _/| |__| / ____ \| |  | |
#              |_|  |_|  \___|\___|  |_|   \____/_/    \_\_|  |_|
#
#                   FreeFOAM: The Cross-Platform CFD Toolkit
#
# Copyright (C) 2008-2012 Michael Wild <themiwi@users.sf.net>
#                         Gerber van der Graaf <gerber_graaf@users.sf.net>
#-------------------------------------------------------------------------------
# License
#   This file is part of FreeFOAM.
#
#   FreeFOAM is free software: you can redistribute it and/or modify it
#   under the terms of the GNU General Public License as published by the
#   Free Software Foundation, either version 3 of the License, or (at your
#   option) any later version.
#
#   FreeFOAM is distributed in the hope that it will be useful, but WITHOUT
#   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#   for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with FreeFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# Script
#    compareDeps
#
# Description
#    Compares the dependency files generated by generateOpenFOAMDeps.py and
#    compiling with -MD.
#
#------------------------------------------------------------------------------

"""Usage: generateOpenFOAMDeps <WM_PROJECT_DIR>

Compares the dependency files generated by generateOpenFOAMDeps.py and
compiling with -MD.

Options
-------
<WM_PROJECT_DIR> Top-level OpenFOAM source directory

"""

import sys
sys.path.insert(0, '@FOAM_PYTHON_DIR@')
from FreeFOAM.compat import *
import re
import os
import os.path as op

# argument parsing
args = sys.argv[1:]
if len(args) != 1:
   echo('Error: the path to the OpenFOAM installation is required',
         file=sys.stderr)
   sys.exit(1)

WM_PROJECT_DIR=op.abspath(args[0])

blacklistPatterns = (
      re.compile(r'ImplI?\.C\.ffd$'),
      re.compile(r'[pP]rintStack\.C\.ffd$'),
      re.compile(r'PDRFoamAutoRefine\.C\.ffd$'),
      re.compile(r'src/OpenFOAM/db/dlLibraryTable/dlLibraryTable'),
      )

def checkBlacklistPatterns(f):
   for p in blacklistPatterns:
      if p.search(f) is not None:
         return True
   return False

blacklistDepsPatterns = (
      re.compile(r'src/OpenFOAM/db/dlLibraryTable'),
      re.compile(r'src/OpenFOAM/primitives/Lists/fileNameList.H'),
      re.compile(r'src/OpenFOAM/primitives/ints/long/long.H'),
      re.compile(r'src/OpenFOAM/include/OSspecific.H'),
      )

def removeBlacklistDeps(l):
   result = list(l)
   for p in blacklistDepsPatterns:
      result = list(filter(lambda f: p.search(f) is None, result))
   return result

substPatterns = (
      (re.compile(r'_(\.C\.ffd)$'), r'\1'),
      (re.compile(r'_subst(\.C\.ffd)$'), r'\1'),
      (re.compile(r'mpi(PstreamGlobals\.C\.ffd)$'), r'\1'),
      (re.compile(r'\.C.ffd$'), r'.ofd'),
      )

def applySubstPatterns(f):
   result = f
   for p, r in substPatterns:
      result = p.sub(r, result)
   return result

mpiPatterns = (
      re.compile(r'parMetisDecomp\.C\.ffd$'),
      re.compile(r'decompositionMethod\.C\.ffd$'),
      re.compile(r'hierarchGeomDecomp\.C\.ffd$'),
      re.compile(r'geomDecomp\.C\.ffd$'),
      re.compile(r'manualDecomp\.C\.ffd$'),
      re.compile(r'simpleGeomDecomp\.C\.ffd$'),
      re.compile(r'mpiPstreamGlobals\.C\.ffd$'),
      )

def checkMpiPatterns(f):
   for p in mpiPatterns:
      if p.search(f) is not None:
         return True
   return False

SOURCE_DIR = "@PROJECT_SOURCE_DIR@"
BINARY_DIR = "@PROJECT_BINARY_DIR@"

for parent, dirs, files in os.walk(BINARY_DIR):
   for f in filter(lambda f: op.splitext(f)[1]=='.ffd', files):
      f = op.join(parent, f)
      # skip blacklisted items
      if checkBlacklistPatterns(f):
         continue
      # construct name in OpenFOAM
      i = f.rfind('/', 0, f.find('@CMAKE_FILES_DIRECTORY@')+1)
      d = op.join(WM_PROJECT_DIR, op.relpath(f[:i], BINARY_DIR), 'Make',
            'linux64FreeFOAMDPDep')
      if checkMpiPatterns(f):
         d += 'SYSTEMOPENMPI'
      of = op.basename(f)
      of = applySubstPatterns(of)
      of = op.join(d, of)
      if not op.isfile(of):
         echo('ERROR: failed to find', of, file=sys.stderr)
         sys.exit(1)
      # read files
      ffdeps = removeBlacklistDeps(map(str.strip, open(f, 'rt').readlines()))
      src = ffdeps[0]
      ffdeps = set(ffdeps)
      ofdeps = set(removeBlacklistDeps(map(
         str.strip, open(of, 'rt').readlines())))
      ffadd = ffdeps - ofdeps
      ffrem = ofdeps - ffdeps
      if len(ffadd) or len(ffrem):
         echo(src+':')
      if len(ffadd):
         echo('  +', '\n  + '.join(ffadd))
      if len(ffrem):
         echo('  -', '\n  - '.join(ffrem))

# ------------------------- vim: set sw=3 sts=3 et: --------------- end-of-file
